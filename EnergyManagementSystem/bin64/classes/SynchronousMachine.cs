//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMS {
    using System;
    using EMS;
    
    
    /// An electromechanical device that operates with shaft rotating synchronously with the network. It is a single machine operating either as a generator or synchronous condenser or pump.
    public class SynchronousMachine : RotatingMachine {
        
        /// Active mode or not.
        private System.Boolean? cim_active;
        
        private const bool isActiveMandatory = false;
        
        private const string _activePrefix = "cim";
        
        private EMSFuel cim_fuel;
        
        private const bool isFuelMandatory = false;
        
        private const string _fuelPrefix = "cim";
        
        /// SynchronousMachine load in percent.
        private System.Single? cim_loadPct;
        
        private const bool isLoadPctMandatory = false;
        
        private const string _loadPctPrefix = "cim";
        
        private System.Single? cim_maxCosPhi;
        
        private const bool isMaxCosPhiMandatory = false;
        
        private const string _maxCosPhiPrefix = "cim";
        
        /// Maximum reactive power limit. This is the maximum (nameplate) limit for the unit.
        private System.Single? cim_maxQ;
        
        private const bool isMaxQMandatory = false;
        
        private const string _maxQPrefix = "cim";
        
        private System.Single? cim_minCosPhi;
        
        private const bool isMinCosPhiMandatory = false;
        
        private const string _minCosPhiPrefix = "cim";
        
        /// Minimum reactive power limit for the unit.
        private System.Single? cim_minQ;
        
        private const bool isMinQMandatory = false;
        
        private const string _minQPrefix = "cim";
        
        /// Current mode of operation.
        private SynchronousMachineOperatingMode? cim_operatingMode;
        
        private const bool isOperatingModeMandatory = false;
        
        private const string _operatingModePrefix = "cim";
        
        public virtual bool Active {
            get {
                return this.cim_active.GetValueOrDefault();
            }
            set {
                this.cim_active = value;
            }
        }
        
        public virtual bool ActiveHasValue {
            get {
                return this.cim_active != null;
            }
        }
        
        public static bool IsActiveMandatory {
            get {
                return isActiveMandatory;
            }
        }
        
        public static string ActivePrefix {
            get {
                return _activePrefix;
            }
        }
        
        public virtual EMSFuel Fuel {
            get {
                return this.cim_fuel;
            }
            set {
                this.cim_fuel = value;
            }
        }
        
        public virtual bool FuelHasValue {
            get {
                return this.cim_fuel != null;
            }
        }
        
        public static bool IsFuelMandatory {
            get {
                return isFuelMandatory;
            }
        }
        
        public static string FuelPrefix {
            get {
                return _fuelPrefix;
            }
        }
        
        public virtual float LoadPct {
            get {
                return this.cim_loadPct.GetValueOrDefault();
            }
            set {
                this.cim_loadPct = value;
            }
        }
        
        public virtual bool LoadPctHasValue {
            get {
                return this.cim_loadPct != null;
            }
        }
        
        public static bool IsLoadPctMandatory {
            get {
                return isLoadPctMandatory;
            }
        }
        
        public static string LoadPctPrefix {
            get {
                return _loadPctPrefix;
            }
        }
        
        public virtual float MaxCosPhi {
            get {
                return this.cim_maxCosPhi.GetValueOrDefault();
            }
            set {
                this.cim_maxCosPhi = value;
            }
        }
        
        public virtual bool MaxCosPhiHasValue {
            get {
                return this.cim_maxCosPhi != null;
            }
        }
        
        public static bool IsMaxCosPhiMandatory {
            get {
                return isMaxCosPhiMandatory;
            }
        }
        
        public static string MaxCosPhiPrefix {
            get {
                return _maxCosPhiPrefix;
            }
        }
        
        public virtual float MaxQ {
            get {
                return this.cim_maxQ.GetValueOrDefault();
            }
            set {
                this.cim_maxQ = value;
            }
        }
        
        public virtual bool MaxQHasValue {
            get {
                return this.cim_maxQ != null;
            }
        }
        
        public static bool IsMaxQMandatory {
            get {
                return isMaxQMandatory;
            }
        }
        
        public static string MaxQPrefix {
            get {
                return _maxQPrefix;
            }
        }
        
        public virtual float MinCosPhi {
            get {
                return this.cim_minCosPhi.GetValueOrDefault();
            }
            set {
                this.cim_minCosPhi = value;
            }
        }
        
        public virtual bool MinCosPhiHasValue {
            get {
                return this.cim_minCosPhi != null;
            }
        }
        
        public static bool IsMinCosPhiMandatory {
            get {
                return isMinCosPhiMandatory;
            }
        }
        
        public static string MinCosPhiPrefix {
            get {
                return _minCosPhiPrefix;
            }
        }
        
        public virtual float MinQ {
            get {
                return this.cim_minQ.GetValueOrDefault();
            }
            set {
                this.cim_minQ = value;
            }
        }
        
        public virtual bool MinQHasValue {
            get {
                return this.cim_minQ != null;
            }
        }
        
        public static bool IsMinQMandatory {
            get {
                return isMinQMandatory;
            }
        }
        
        public static string MinQPrefix {
            get {
                return _minQPrefix;
            }
        }
        
        public virtual SynchronousMachineOperatingMode OperatingMode {
            get {
                return this.cim_operatingMode.GetValueOrDefault();
            }
            set {
                this.cim_operatingMode = value;
            }
        }
        
        public virtual bool OperatingModeHasValue {
            get {
                return this.cim_operatingMode != null;
            }
        }
        
        public static bool IsOperatingModeMandatory {
            get {
                return isOperatingModeMandatory;
            }
        }
        
        public static string OperatingModePrefix {
            get {
                return _operatingModePrefix;
            }
        }
    }
}
